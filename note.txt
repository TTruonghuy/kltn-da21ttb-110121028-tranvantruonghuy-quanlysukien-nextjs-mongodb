- thống kê cho ban tổ chức
- sửa xuất, vé
- checkin
- admin page



xây dựng api và trang thanh toán 
- Sidebar với đầy dủ chwusc năng - tên trang
- danh sách sự kiện : điều kiện lấy
+ Chỉ hiển thị các sự kiện đã qua, nghĩa là tất cả các session của event đã kết thúc.
+ Thời gian “giữ tiền” (holding period) thường phụ thuộc vào chính sách của nền tảng: Ví dụ: 7–14 ngày sau khi sự kiện kết thúc để xử lý các hậu tố
- Thông tin nên hiển thị trong bảng:
+ tên sự kiện
+ Thời gian kết thúc
+ doanh thu
+ hành động: Thanh toán
- Xử lý khi bấm nút thanh toán
 + hiển thị model: 
Tên sự kiện
Ngày diễn ra / kết thúc
Doanh thu tổng
Số vé bán ra
Hoa hồng / phí nền tảng
tên ban tổ chức
tên ngân hàng
số tk ngân hàng
tên tk ngân hàng
Upload hình ảnh chứng từ chuyển khoản

<DOCUMENT filename="EventManagementPage.tsx">
"use client";
import { useState, useEffect, useRef } from "react";
import CreateEventForm from "./CreateEventForm";
import CreateTicketForm from "../ticket/CreateTicket";
import Header from "@/app/components/Header";
import axios from "@/lib/axiosInstance";
import { EventFormData } from "@/app/components/types";
import OrganizerEventList from "./OrganizerEventList";
import EventDetailModal from "./EventDetailModal";
import Profile from "@/app/components/users/Profile";
import EventDashboard from "./EventDashboard";
import { TiChevronLeft } from "react-icons/ti";

export default function EventManagementPage() {
    const [activeTab, setActiveTab] = useState<"create" | "saved">("create");
    const [showProfile, setShowProfile] = useState(false);
    const [selectedEventId, setSelectedEventId] = useState<string | null>(null);
    const [showDetailModal, setShowDetailModal] = useState(false);
    const [showCreateTicketForm, setShowCreateTicketForm] = useState(false);
    const [showUserMenu, setShowUserMenu] = useState(false);
    const userMenuRef = useRef<HTMLDivElement>(null);
    const [eventListTab, setEventListTab] = useState<"pending" | "approved" | "rejected">("pending");
    const [approvedTimeFilter, setApprovedTimeFilter] = useState<"all" | "ongoing" | "past">("all");

    const [user, setUser] = useState<{
        email: string;
        name: string;
        avatar?: string;
        logo?: string;
        role?: string
    } | null>(null);

    const [formData, setFormData] = useState<EventFormData>({
        title: "",
        description: "",
        houseNumber: "",
        ward: "",
        district: "",
        province: "",
        location: {
            houseNumber: "",
            ward: "",
            district: "",
            province: "",
        },
        image: null as File | null,
        event_type: "",
        noSale: false,
        sessions: [],
        ticketMode: "area",
    });

    const handleFormDataChange = (
        data: Partial<EventFormData> | ((prev: EventFormData) => EventFormData)
    ) => {
        setFormData(prev => {
            if (typeof data === "function") {
                return data(prev);
            } else {
                return { ...prev, ...data };
            }
        });
    };

    useEffect(() => {
        function handleClickOutside(event: MouseEvent) {
            if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {
                setShowUserMenu(false);
            }
        }
        if (showUserMenu) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [showUserMenu]);

    useEffect(() => {
        axios
            .get("http://localhost:5000/auth/me", { withCredentials: true })
            .then((res) => {
                if (res.data && res.data.user) {
                    setUser(res.data.user);
                } else {
                    console.error("Invalid user data:");
                    setUser(null);
                }
            })
            .catch((err) => {
                console.error("Error fetching user data:", err);
                setUser(null);
            });
    }, []);

    return (
        <div className="flex flex-col min-h-screen">
            <div className="flex flex-grow h-full w-full">
                <nav className="w-64 bg-white flex flex-col p-4 fixed top-0 h-160 border-r border-gray-200">
                    {user && (
                        <div className="flex items-center gap-4 mb-8 mt-8 border-b pb-4"
                            onClick={() => setShowUserMenu((prev) => !prev)}
                            ref={userMenuRef}
                        >
                            <img
                                src={user.logo || user.avatar || "/default-avatar.png"}
                                alt={user.name}
                                className="w-10 h-10 rounded-full object-cover border"
                            />
                            <div>
                                <span className="block font-semibold text-blue-950">{user.name}</span>
                                <span className="block text-xs text-gray-500">{user.email}</span>
                            </div>
                        </div>
                    )}

                    <button
                        onClick={() => {
                            setActiveTab("create");
                            setShowProfile(false);
                        }}
                        className={`block w-full text-left px-4 py-2 mb-2 text-gray-700 hover:bg-gray-100 rounded ${activeTab === "create" && !showProfile ? "bg-blue-100" : "bg-white"} hover:bg-blue-200`}
                    >
                        Tạo sự kiện
                    </button>
                    <button
                        onClick={() => {
                            setActiveTab("saved");
                            setShowProfile(false);
                        }}
                        className={`block w-full text-left px-4 py-2 mb-2 text-gray-700 hover:bg-gray-100 rounded ${activeTab === "saved" && !showProfile ? "bg-blue-100" : "bg-white"} hover:bg-blue-200`}
                    >
                        Quản lý sự kiện
                    </button>

                    {user && (
                        <div className="flex flex-col gap-2">
                            <button
                                className={`block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 rounded ${showProfile ? "bg-blue-100" : "bg-white"} hover:bg-blue-200`}
                                onClick={() => {
                                    setShowProfile(true);
                                }}
                            >
                                Thông tin
                            </button>
                            <button
                                className="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 rounded"
                                onClick={async () => {
                                    if (window.confirm("Bạn có chắc chắn muốn đăng xuất?")) {
                                        try {
                                            await axios.post("http://localhost:5000/auth/logout", {}, { withCredentials: true });
                                            setUser(null);
                                            window.location.href = "/";
                                        } catch (error) {
                                            console.error("Error logging out:", error);
                                        }
                                    }
                                }}
                            >
                                Đăng xuất
                            </button>
                        </div>
                    )}
                </nav>

                <main className="flex-grow p-10 pl-0 pt-12 bg-white mr-5 mb-5 ml-[300px]">
                    {showDetailModal && selectedEventId ? (
                        <div>
                            <button
                                className=" px-2 pl-0 ml-6 py-1 text-blue-950 rounded hover:bg-blue-100 font-bold"
                                onClick={() => {
                                    setShowDetailModal(false);
                                    setSelectedEventId(null);
                                }}
                            >
                                <TiChevronLeft className="inline-block " /> Trở lại
                            </button>
                            <EventDetailModal eventId={selectedEventId} onBack={() => {
                                setShowDetailModal(false);
                                setSelectedEventId(null);
                            }} />
                        </div>
                    ) : showProfile && user ? (
                        <Profile
                            user={user}
                            onUpdate={updated => {
                                setUser({ ...updated, role: user.role });
                            }}
                            onDelete={() => setShowProfile(false)}
                        />
                    ) : (
                        <>
                            {activeTab === "create" && (
                                showCreateTicketForm ? (
                                    <CreateTicketForm
                                        formData={formData}
                                        onFormDataChange={handleFormDataChange}
                                        onBack={() => setShowCreateTicketForm(false)}
                                        onSubmit={() => {
                                            setShowCreateTicketForm(false);
                                            setActiveTab("saved");
                                        }}
                                    />
                                ) : (
                                    <CreateEventForm
                                        formData={formData}
                                        onFormDataChange={handleFormDataChange}
                                        onNext={() => setShowCreateTicketForm(true)}
                                    />
                                )
                            )}

                            {activeTab === "saved" && (
                                <div>
                                    <h2 className="text-xl font-bold mb-4 text-blue-950">Sự kiện đã tạo</h2>
                                    <div className="flex justify-center mb-6">
                                        <button
                                            className={`px-10 py-1 border-b-3 border-b-green-100 ${eventListTab === "pending" ? " text-blue-950 font-bold hover:text-blue-800 hover:scale-101" : " text-gray-700 hover:scale-101"}`}
                                            onClick={() => setEventListTab("pending")}
                                        >
                                            Đã lưu
                                        </button>
                                        <button
                                            className={`px-10  border-b-3 border-b-blue-100 ${eventListTab === "approved" ? "text-blue-950 font-bold hover:text-blue-800 hover:scale-101" : "text-gray-700 hover:scale-101"}`}
                                            onClick={() => setEventListTab("approved")}
                                        >
                                            Đã đăng
                                        </button>
                                        <button
                                            className={`px-10 border-b-3 border-b-red-100 ${eventListTab === "rejected" ? "text-blue-950 font-bold hover:text-blue-800 hover:scale-101" : "text-gray-700 hover:scale-101"}`}
                                            onClick={() => setEventListTab("rejected")}
                                        >
                                            Đã xoá
                                        </button>
                                    </div>

                                    {eventListTab === "approved" && (
                                        <div className="flex justify-end">
                                            <button
                                                className={`flex items-center mr-4 ${approvedTimeFilter === "ongoing" ? "" : "text-gray-500"}`}
                                                onClick={() => setApprovedTimeFilter("ongoing")}
                                            >
                                                <div className="w-3 h-3 bg-blue-500 mr-1 rounded"> </div>
                                                Đang mở bán
                                            </button>

                                            <button
                                                className={`flex items-center ${approvedTimeFilter === "past" ? " " : "text-gray-500"}`}
                                                onClick={() => setApprovedTimeFilter("past")}
                                            >
                                                <div className="w-3 h-3 bg-gray-500 mr-1 rounded"> </div>
                                                Đã qua
                                            </button>
                                        </div>
                                    )}

                                    <OrganizerEventList
                                        filterStatus={eventListTab}
                                        filterTime={eventListTab === "approved" && approvedTimeFilter !== "all" ? approvedTimeFilter : undefined}
                                        onSelectEvent={(id) => {
                                            setSelectedEventId(id);
                                            setShowDetailModal(true);
                                        }}
                                    />
                                </div>
                            )}
                        </>
                    )}
                </main>
            </div>
        </div>
    );
}
</DOCUMENT>

<DOCUMENT filename="OrganizerEventList.tsx">
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import axios from "@/lib/axiosInstance";
import { Button } from "@/app/components/ui/button"; // Sử dụng component Button từ thư viện UI của bạn
import { IoTicketOutline } from "react-icons/io5";

interface EventItem {
    _id: string;
    title: string;
    image?: string;
    status?: string;
    start_time?: string;
    end_time?: string;
    total_sold?: number;
    remaining?: number;
    total_revenue?: number;
}


export default function OrganizerEventList({
    filterStatus,
    filterTime,
    onSelectEvent,
}: {
    filterStatus?: string;
    filterTime?: "upcoming" | "ongoing" | "past";
    onSelectEvent?: (eventId: string) => void;
}) {
    const [events, setEvents] = useState<EventItem[]>([]);
    const [loading, setLoading] = useState(true);
    const router = useRouter();




    useEffect(() => {
        axios.get("/event/my-events", { withCredentials: true })
            .then(res => {
                console.log("API response:", res.data);
                const rawEvents = res.data.events || [];
                console.log("Raw events:", rawEvents);
                const events = rawEvents.map((event: any) => ({
                    _id: event._id || event.id,
                    title: event.title,
                    image: event.image,
                    status: event.status,
                    start_time: event.min_start_time,
                    end_time: event.max_end_time,
                    total_sold: event.total_sold,
                    remaining: event.remaining,
                    total_revenue: event.total_revenue,
                }));
                console.log("Mapped events:", events);
                setEvents(events);
            })
            .catch((err) => {
                console.error("API error:", err);
                setEvents([]);
            })
            .finally(() => setLoading(false));
    }, []);

    // Sau khi setEvents, log lại state
    useEffect(() => {
        console.log("Current events state:", events);
    }, [events]);

    if (loading) return <div>Đang tải...</div>;
    if (!events.length) {
        console.warn("events.length === 0, events:", events);
        return <div>Không có sự kiện nào.</div>;
    }

    const handleApprove = async (eventId: string) => {
        try {
            await axios.put(`/event/${eventId}/status`, { status: "approved" }, { withCredentials: true });
            // Sau khi cập nhật thành công, cập nhật lại state để giao diện đổi màu và ẩn nút
            setEvents(prev =>
                prev.map(ev =>
                    ev._id === eventId ? { ...ev, status: "approved" } : ev
                )
            );
        } catch (err) {
            alert("Cập nhật trạng thái thất bại!");
        }
    };

    const handleRejected = async (eventId: string) => {
        try {
            await axios.put(`/event/${eventId}/status`, { status: "rejected" }, { withCredentials: true });
            // Sau khi cập nhật thành công, cập nhật lại state để giao diện đổi màu và ẩn nút
            setEvents(prev =>
                prev.map(ev =>
                    ev._id === eventId ? { ...ev, status: "rejected" } : ev
                )
            );
        } catch (err) {
            alert("Cập nhật trạng thái thất bại!");
        }
    };

    const handlePending = async (eventId: string) => {
        try {
            await axios.put(`/event/${eventId}/status`, { status: "pending" }, { withCredentials: true });
            // Sau khi cập nhật thành công, cập nhật lại state để giao diện đổi màu và ẩn nút
            setEvents(prev =>
                prev.map(ev =>
                    ev._id === eventId ? { ...ev, status: "pending" } : ev
                )
            );
        } catch (err) {
            alert("Cập nhật trạng thái thất bại!");
        }
    };

    const openScanPage = (event: EventItem) => {
        router.push(`/scan/${event._id}`);
    };


    let filteredEvents = filterStatus
        ? events.filter(ev => ev.status === filterStatus)
        : events;

    if (loading) return <div>Đang tải...</div>;
    if (filterTime) {
        const now = new Date();
        filteredEvents = filteredEvents.filter(ev => {
            const start = ev.start_time ? new Date(ev.start_time) : null;
            const end = ev.end_time ? new Date(ev.end_time) : null;
            if (!start || !end) return false;
            if (filterTime === "upcoming") return start > now;
            if (filterTime === "ongoing") return end >= now;
            if (filterTime === "past") return end < now;
            return true;
        });
        if (!filteredEvents.length) {
            console.warn("events.length === 0, events:", filteredEvents);
            return <div>Không có sự kiện nào.</div>;
        }
    }

    if (filterStatus === "rejected") {
        return (
            <div className="flex flex-col gap-3">
                {filteredEvents.map(event => (
                    <div key={event._id} className="flex items-center justify-between border border-red-200 rounded-lg py-2 px-4 mx-20">
                        <span>{event.title}</span>
                        <div className="flex gap-2">
                            <Button
                                className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-400"
                                onClick={() => handlePending(event._id)}
                            >
                                Khôi phục
                            </Button>
                            <Button
                                className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-400"
                                onClick={() => handlePending(event._id)}
                            >
                                Xoá vĩnh viễn
                            </Button>
                        </div>
                    </div>
                ))}
            </div>
        );
    }

    if (filterStatus === "approved") {
        const now = new Date();
        const ongoingEvents = filteredEvents.filter(ev => {
            const end = ev.end_time ? new Date(ev.end_time) : null;
            return ev.status === "approved" && end && end >= now;
        });

        const pastEvents = filteredEvents.filter(ev => {
            const end = ev.end_time ? new Date(ev.end_time) : null;
            return ev.status === "approved" && end && end < now;
        });


        return (
            <div>
                {ongoingEvents.length > 0 && (
                    <>
                        <div className="grid pt-6 flex">
                            {ongoingEvents.map(event => (
                                <div
                                    key={`ongoing-${event._id}`}
                                    className="flex w-full bg-blue-50 rounded mb-4"
                                >
                                    <img
                                        src={event.image}
                                        alt={event.title}
                                        className="w-[35%] object-cover rounded"
                                    />
                                    <div className=" ml-4 w-100 flex flex-col flex-grow border-r">
                                        <div className="font-semibold text-[14px] pt-2">{event.title}</div>
                                        <div className="text-xs text-gray-600 mb-2">
                                            {event.start_time && event.end_time
                                                ? `${new Date(event.start_time).toLocaleString("vi-VN", {
                                                    day: "2-digit", month: "2-digit", year: "numeric",
                                                    hour: "2-digit", minute: "2-digit", hour12: false
                                                })} 
                                                        - 
                                                    ${new Date(event.end_time).toLocaleString("vi-VN", {
                                                    day: "2-digit", month: "2-digit", year: "numeric",
                                                    hour: "2-digit", minute: "2-digit", hour12: false
                                                })}`
                                                : ""}
                                        </div>
                                        <p className="w-60 px-10 border-1 border-blue-200 ml-20"></p>

                                        <div className="text-gray-700 flex flex-col flex-grow px-2 mb-2 mr-4 mt-1">
                                            <div className="flex justify-between">
                                                <div className="mt-1 border px-2 py-1 rounded flex items-center border-red-200">
                                                    Đã bán: {event.total_sold || 0} <IoTicketOutline className="ml-2" />
                                                </div>

                                                <div className="mt-1 border px-2 py-1 rounded border-blue-200 flex border-blue-200 items-center">
                                                    Còn lại: {event.remaining || 0} <IoTicketOutline className="ml-2" />
                                                </div>
                                            </div>

                                            <div className="mt-1 border px-2 py-1 rounded border-blue-200 flex border-green-200 mb-1">
                                                Tổng doanh thu: {(event.total_revenue || 0).toLocaleString('vi-VN')} đ
                                            </div>

                                            <button
                                                className="rounded bg-blue-950 px-6 py-1 text-white hover:bg-blue-900 ml-auto mt-auto mb-1"
                                                onClick={e => {
                                                    e.stopPropagation();
                                                    onSelectEvent?.(event._id);
                                                }}
                                            >
                                                Chi tiết
                                            </button>
                                        </div>
                                    </div>
                                    {/*hiển thị model nút mở quét vé*/}
                                    <div
                                        className="text-gray-500 p-2 ml-4 text-center hover:scale-102 cursor-pointer"
                                        onClick={() => openScanPage(event)}
                                    >
                                        <img src="/qr.png" alt="" className="h-35 w-35 " />
                                        - Quét vé -
                                    </div>
                                </div>
                            ))}
                        </div>
                    </>
                )}


                {pastEvents.length > 0 && (
                    <>
                        <div className="grid pt-6 flex">
                            {pastEvents.map(event => (
                                <div
                                    key={`past-${event._id}`}
                                    className="flex w-full bg-gray-50 rounded mb-4"
                                >

                                    <img
                                        src={event.image}
                                        alt={event.title}
                                        className="w-[35%] object-cover rounded"
                                    />
                                    <div className=" ml-4 w-100 flex flex-col flex-grow border-r">
                                        <div className="font-semibold text-[14px] pt-2">{event.title}</div>
                                        <div className="text-xs text-gray-600 mb-2">
                                            {event.start_time && event.end_time
                                                ? `${new Date(event.start_time).toLocaleString("vi-VN", {
                                                    day: "2-digit", month: "2-digit", year: "numeric",
                                                    hour: "2-digit", minute: "2-digit", hour12: false
                                                })} 
                                                        - 
                                                    ${new Date(event.end_time).toLocaleString("vi-VN", {
                                                    day: "2-digit", month: "2-digit", year: "numeric",
                                                    hour: "2-digit", minute: "2-digit", hour12: false
                                                })}`
                                                : ""}
                                        </div>
                                        <p className="w-60 px-10 border-1 border-blue-200 ml-20"></p>

                                        <div className="text-gray-700 flex flex-col flex-grow px-2 mb-2 mr-4 mt-1">
                                            <div className="flex justify-between">
                                                <div className="mt-1 border px-2 py-1 rounded flex items-center border-red-200">
                                                    Đã bán: {event.total_sold || 0} <IoTicketOutline className="ml-2" />
                                                </div>

                                                <div className="mt-1 border px-2 py-1 rounded border-blue-200 flex border-blue-200 items-center">
                                                    Còn lại: {event.remaining || 0} <IoTicketOutline className="ml-2" />
                                                </div>
                                            </div>

                                            <div className="mt-1 border px-2 py-1 rounded border-blue-200 flex border-green-200 mb-1">
                                                Tổng doanh thu: {(event.total_revenue || 0).toLocaleString('vi-VN')} đ
                                            </div>

                                            <button
                                                className="rounded bg-blue-950 px-6 py-1 text-white hover:bg-blue-900 ml-auto mt-auto mb-1"
                                                onClick={e => {
                                                    e.stopPropagation();
                                                    onSelectEvent?.(event._id);
                                                }}
                                            >
                                                Chi tiết
                                            </button>
                                        </div>
                                    </div>
                                    {/*hiển thị model nút mở quét vé*/}

                                </div>
                            ))}
                        </div>
                    </>
                )}
                {ongoingEvents.length === 0 && pastEvents.length === 0 && (
                    <div>Không có sự kiện nào.</div>
                )}
            </div>
        );
    }

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {filteredEvents.map(event => (
                <div key={event._id}
                    className={`border rounded-lg flex flex-col items-center 
                    ${event.status === "pending" ? "bg-green-50" : ""}
                    ${event.status === "approved" ? "bg-blue-50" : ""}
                `}
                    onClick={() => onSelectEvent?.(event._id)}
                >
                    <img
                        src={event.image}
                        alt={event.title}
                        className="w-full h-30 object-cover rounded mb-2"
                    />
                    <div className="font-semibold text-center text-[12px] p-2">{event.title}</div>

                    <div className="mt-auto">
                        {event.status === "pending" && (
                            <Button className="bg-blue-500 hover:bg-blue-400 text-white rounded mb-3 mr-2"
                                onClick={e => {
                                    e.stopPropagation();
                                    handleApprove(event._id);
                                }}>
                                Đăng
                            </Button>
                        )}

                        {event.status === "pending" && (
                            <Button className="bg-red-500 text-white px-4 py-1 rounded mb-3"
                                onClick={e => {
                                    e.stopPropagation();
                                    handleRejected(event._id);
                                }}>
                                Xóa
                            </Button>
                        )}
                    </div>
                </div>
            ))}
        </div>
    );
}
</DOCUMENT>